using System;
using FrikinCore.Enumeration;
using FrikinCore.Stats;
using TSCore.Time;
using UnityEngine;

namespace FrikinCore.Player
{
    public class PlayerInvulnerability : AbstractPlayerBehavior
    {
        int _invulnerabilityTicks; 
        bool _resetInvulnerable;
        int _invulnerabilityTime;

        void Start()
        {
            TickTimeTimer.OnTick += OnTick;
        }

        void OnTick(object sender, TickTimeTimer.OnTickEventArgs e)
        {
            throw new NotImplementedException();
        }

        void Update()
        {
            Physics2D.IgnoreLayerCollision(12, 14, Model.IsInvulnerable);

            if (_resetInvulnerable)
            {
                if (_invulnerabilityTicks >= _invulnerabilityTime)
                {
                    ResetInvulnerability();
                    _invulnerabilityTicks = 0;
                }
            }
        }

        public void TurnInvulnerable(bool resetAfterTime = true)
        {
            Model.IsInvulnerable = true;
            _invulnerabilityTime = Mathf.RoundToInt(UpdatedStatManager.GetStat(GameEnums.PermanentStats.InvulnarablityFramesAdjust)
                .GetStatValue(1) * TickTimeTimer.TickTimerMax);
            Model.Animator.SetBool(PlayerDataModel.IsRespawningHash, true);
            if(resetAfterTime) _resetInvulnerable = true;
        }

        public void ResetInvulnerability()
        {
            Model.IsInvulnerable = false;
            Model.Animator.SetBool(PlayerDataModel.IsRespawningHash, false);
            _resetInvulnerable = false;
        }
    }
}
